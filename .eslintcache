[{"C:\\3wa_formation\\reactjs\\QUIZ_APP\\src\\index.js":"1","C:\\3wa_formation\\reactjs\\QUIZ_APP\\src\\LoginComponent.js":"2","C:\\3wa_formation\\reactjs\\QUIZ_APP\\src\\IndexComponent.js":"3","C:\\3wa_formation\\reactjs\\QUIZ_APP\\src\\QuizData.js":"4","C:\\3wa_formation\\reactjs\\QUIZ_APP\\src\\QuizComponent.js":"5"},{"size":201,"mtime":1607875338382,"results":"6","hashOfConfig":"7"},{"size":1131,"mtime":1607882086013,"results":"8","hashOfConfig":"7"},{"size":682,"mtime":1607882604584,"results":"9","hashOfConfig":"7"},{"size":863,"mtime":1607826021385,"results":"10","hashOfConfig":"7"},{"size":4701,"mtime":1607884584624,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j9zwo4",{"filePath":"14","messages":"15","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\3wa_formation\\reactjs\\QUIZ_APP\\src\\index.js",[],"C:\\3wa_formation\\reactjs\\QUIZ_APP\\src\\LoginComponent.js",["24","25","26","27","28","29"],"import React from \"react\";\r\n\r\nimport { BrowserRouter, Switch, Route } from  \"react-router-dom\"\r\n\r\n\r\nexport class LoginComponent extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n  \r\n    this.state = {\r\n       err: ''\r\n    }\r\n  }\r\n  \r\n\r\n  login(e) {\r\n    e.preventDefault();\r\n    var username = e.target.elements.username.value;\r\n    var password = e.target.elements.password.value;\r\n    if (username == 'abc' && password == '123') {\r\n      this.props.history.push('/quiz/' + username);\r\n    } else {\r\n      this.setState({\r\n        err: 'Invalid'\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    let format = {\r\n      color:\"red\"\r\n    };\r\n    return (\r\n      <div>\r\n        <h3>Login</h3>\r\n        <span style={format}>{this.state.err != '' ? this.state.err : ''}</span>\r\n        <form method=\"post\" onSubmit={this.login.bind(this)}>\r\n          Username <input type=\"text\" name=\"username\" />\r\n          <br />\r\n          Password <input type=\"text\" name=\"password\" />\r\n          <br />\r\n          <input type=\"submit\" value=\"Login\" />\r\n\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoginComponent\r\n","C:\\3wa_formation\\reactjs\\QUIZ_APP\\src\\IndexComponent.js",[],"C:\\3wa_formation\\reactjs\\QUIZ_APP\\src\\QuizData.js",[],"C:\\3wa_formation\\reactjs\\QUIZ_APP\\src\\QuizComponent.js",["30"],"import React, { Component } from 'react'\r\nimport {QuizData} from './QuizData'\r\nimport Pic from './pic_man.png'\r\n\r\nclass QuizComponent extends Component {\r\nstate = {\r\n    userAnswer:null,\r\n    currentIndex:0,\r\n    options: [],    \r\n    quizEnd: false,\r\n    score: 0,\r\n    disabled: true\r\n}\r\n    \r\n\r\n    // Quiz actuel\r\n    loadQuiz = () => {\r\n        const {currentIndex} = this.state //get the current index\r\n        this.setState(() => {\r\n            return {\r\n                question: QuizData[currentIndex].question,\r\n                options : QuizData[currentIndex].options,\r\n                answer: QuizData[currentIndex].answer          \r\n            }\r\n        }\r\n        )\r\n    }\r\n\r\n    // Gère l'événement Click pour le bouton suivant\r\n    nextQuestionHander = () => {\r\n        const {userAnswer, answer, score} = this.state\r\n        this.setState({\r\n            currentIndex: this.state.currentIndex + 1\r\n        })\r\n\r\n        // Vérifiez la réponse correcte et le score d'augmentation\r\n        if(userAnswer === answer){\r\n            this.setState({\r\n                score: score + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    // Chargez le quiz une fois le composant monté\r\n    componentDidMount(){\r\n        this.loadQuiz();\r\n    }\r\n\r\n    // Mettre à jour le composant\r\n    componentDidUpdate(prevProps, prevState){\r\n        const{currentIndex} = this.state;\r\n        if(this.state.currentIndex !== prevState.currentIndex){\r\n            this.setState(() => {\r\n                return {\r\n                    disabled: true,\r\n                    question: QuizData[currentIndex].question,\r\n                    options : QuizData[currentIndex].options,\r\n                    answer: QuizData[currentIndex].answer          \r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    // Vérifiez la réponse\r\n    checkAnswer = answer => {\r\n        this.setState({\r\n            userAnswer: answer,\r\n            disabled:false\r\n        })\r\n    }\r\n\r\n    // Répond au clic du bouton Terminer\r\n    finishHandler =() => {\r\n        if(this.state.currentIndex === QuizData.length -1){\r\n            this.setState({\r\n                quizEnd:true\r\n            })\r\n        }\r\n    }\r\n\r\n    logout() {\r\n        this.props.history.push('/logout/');\r\n    }\r\n\r\n    render() {\r\n        const {question, options, currentIndex, userAnswer, quizEnd} = this.state // obtenir l'état actuel      \r\n        if(quizEnd) {\r\n            const {username} = this.props.match.params\r\n            return (           \r\n                <div>\r\n                <h1>Welcome {username} </h1>\r\n                <button onClick={this.logout.bind(this)}>Logout</button>\r\n                <br />  \r\n                    <h1>Game Over. Final score is {this.state.score} points</h1>\r\n                    <p>The correct Answers for the quiz are</p>\r\n                    <ul>\r\n                        {QuizData.map((item, index) => (\r\n                            <li className='options'\r\n                                key={index}>\r\n                                    {item.answer}\r\n                            </li>\r\n                     ))}\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }\r\n        const {username} = this.props.match.params\r\n        return (\r\n            <div>\r\n               <h1>Welcome {username} </h1>\r\n               <button onClick={this.logout.bind(this)}>Logout</button>\r\n               <br />\r\n               <h2>{question}</h2>\r\n                <span>{`Question ${currentIndex+1} of ${QuizData.length}`}</span>\r\n                <img src={Pic} />\r\n                {options.map(option => (  // pour chaque option, nouveau paragraphe\r\n                    <p key={option.id} \r\n                    className={`options ${userAnswer === option ? \"selected\" : null}`}\r\n                    onClick= {() => this.checkAnswer(option)}>\r\n                        {option}\r\n                    </p>\r\n                ))}\r\n                {currentIndex < QuizData.length -1 &&  \r\n                // Le bouton Suivant ne s'affiche que si ce qui précède est vrai\r\n                <button \r\n                    className=\"ui inverted button\" \r\n                    disabled = {this.state.disabled}\r\n                    onClick = {this.nextQuestionHander}\r\n                 >Next Question</button>\r\n                }\r\n                 {currentIndex === QuizData.length -1 &&\r\n                    <button\r\n                    className=\"ui inverted button\"\r\n                    disabled = {this.state.disabled}\r\n                    onClick = {this.finishHandler}\r\n                    >Finish</button>\r\n                 }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuizComponent",{"ruleId":"31","severity":1,"message":"32","line":3,"column":10,"nodeType":"33","messageId":"34","endLine":3,"endColumn":23},{"ruleId":"31","severity":1,"message":"35","line":3,"column":25,"nodeType":"33","messageId":"34","endLine":3,"endColumn":31},{"ruleId":"31","severity":1,"message":"36","line":3,"column":33,"nodeType":"33","messageId":"34","endLine":3,"endColumn":38},{"ruleId":"37","severity":1,"message":"38","line":21,"column":18,"nodeType":"39","messageId":"40","endLine":21,"endColumn":20},{"ruleId":"37","severity":1,"message":"38","line":21,"column":39,"nodeType":"39","messageId":"40","endLine":21,"endColumn":41},{"ruleId":"37","severity":1,"message":"41","line":36,"column":46,"nodeType":"39","messageId":"40","endLine":36,"endColumn":48},{"ruleId":"42","severity":1,"message":"43","line":116,"column":17,"nodeType":"44","endLine":116,"endColumn":34},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Route' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]